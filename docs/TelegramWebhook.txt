--------------------------------------------------------------------------------
 Настройка Telegram бота для работы по Webhook'ам с использованием
 самоподписанного сертификата и сервера без доменного имени (сервер с
 фиксированным IP адресом)
--------------------------------------------------------------------------------

----------------------------------------
 Создание самоподписанного сертификата и установка Webhook'а
----------------------------------------

Сначала несколько понятий:

<token>       - токен, выданный при создании бота
<IP>          - IP адрес сервера, на котором крутится бот
<port>        - Telegram порт для Webhook'а. Этот порт должен слушать бот для
                получения запросов от серверов Telegram. Может быть равен 80,
                88, 443 или 8443 (информация на 06.10.19)
<public.pem>  - название файла открытого сертификата
<private.key> - название файла закрытого ключа

Генерация закрытого ключа и открытого сертификата:

openssl req -newkey rsa:2048 -sha256 -nodes -keyout <private.key> -x509 -days 365 -out <public.pem> -subj "/C=RU/ST=Moscow/L=Moscow/CN=<IP>"

Если openssl выдаёт ошибку вида "Can't load ~/.rnd into RNG", то создаём
файл .rnd (touch ~/.rnd), а затем выполняем указанную выше команду.

Устанавливаем Webhook на URL "https://<IP>:<port>/<token>" (на этот путь должны
будут приходить POST запросы от серверов Telegram):

curl -F "url=https://<IP>:<port>/<token>" -F "certificate=@<public.pem>" https://api.telegram.org/bot<token>/setWebhook

----------------------------------------
 Минимальная программа на Go, которая принимает запросы от Telegram
 по Webhook'ам
----------------------------------------

package main

import (
	"io/ioutil"
	"log"
	"net/http"
)

func tlgrmHandler(w http.ResponseWriter, req *http.Request) {
	body, err := ioutil.ReadAll(req.Body)
	if err == nil {
		log.Println(string(body))
	}
}

func main() {
	http.HandleFunc("/<token>", tlgrmHandler)
	err := http.ListenAndServeTLS(":<port>", "<public.pem>", "<private.key>", nil)
	if err != nil {
		log.Fatal("ListenAndServeTLS: ", err)
	}
}
